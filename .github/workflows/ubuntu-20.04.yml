name: build macOS, Linux, Windows

on: [push, pull_request]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    
    timeout-minutes: 25
    
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
      - name: Check-out repository
        uses: actions/checkout@v2

      - name: Set up non-Python dependences
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libgfortran4

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
            python-version: 3.7

      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      
      - name: Declare env variables on push only
        if: github.event_name == 'push'
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Declare env variables on pull_request only
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$GITHUB_HEAD_REF" >> $GITHUB_ENV

      - name: Add extra info to pyproject.toml
        run: python utils.py --update

      # https://docs.github.com/en/actions/reference/environment-variables
      - name: Declare env variables on push and pull_request
        shell: bash
        run: |
          echo "APP_NAME=$(python utils.py --get tool.poetry.name)" >> $GITHUB_ENV
          echo "SCRIPTS_PATH=$(python utils.py --get ci.project.subdirs.scripts)" >> $GITHUB_ENV
          echo "DISTRIBUTION_PATH=$(python utils.py --get ci.project.subdirs.distribution)" >> $GITHUB_ENV
          echo "DOWNLOAD_PATH=$(python utils.py --get ci.project.subdirs.download)" >> $GITHUB_ENV
          echo "QTIFW_PATH=$(python utils.py --get ci.qtifw.setup.installation_path.${{ runner.os }})" >> $GITHUB_ENV
          echo "PYTHON_PACKAGES_PATH=$(python utils.py --get ci.cache.python_packages_path)" >> $GITHUB_ENV
          echo "GIT_INSTALL_URL=git+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY@${{ env.BRANCH_NAME }}" >> $GITHUB_ENV

      - name: Set up Python dependences
        run: pip install ${{ env.GIT_INSTALL_URL }}

      - name: Download app and script
        run: |
          ls -l
          mkdir -p .ci/distribution
          cd .ci/distribution
          curl -O -L https://github.com/AndrewSazonov/ubuntu_screen_record/releases/download/v0.1/easyDiffraction_Linux_x86-64_v0.0.5_ubuntu-18.04.zip
          unzip easyDiffraction_Linux_x86-64_v0.0.5_ubuntu-18.04.zip
          cd ..
          cd ..
          ls -l

      - name: Set up screen recording dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          system_profiler SPDisplaysDataType | grep Resolution
          "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1440 1080
          system_profiler SPDisplaysDataType | grep Resolution
          
      - name: Set up screen recording dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libxkbcommon-x11-0
          Xvfb :0 -screen 0 1440x1080x24 -ac &
          echo "DISPLAY=:0" >> $GITHUB_ENV

      - name: Install app
        run: python ${{ env.SCRIPTS_PATH }}/InstallApp.py
#        run: /home/runner/easyDiffraction_Linux_x86-64_v0.0.5 --verbose --script /home/runner/SilentInstall.js
#        run: /home/runner/work/easyDiffractionApp/easyDiffractionApp/.ci/distribution/easyDiffraction_Linux_x86-64_v0.0.5 --verbose --script /home/runner/work/easyDiffractionApp/easyDiffractionApp/tools/Scripts/SilentInstall.js

      - name: Run app
        run: python ${{ env.SCRIPTS_PATH }}/RunApp.py test
#        run: /home/runner/easyDiffraction/easyDiffraction/easyDiffraction test

      - name: List dir content
        run: |
          ls -l ~
          ls -l /home/runner
          ls -l /home/runner/easyDiffraction
          ls -l /home/runner/easyDiffraction/easyDiffraction

      - name: Rename test videos
        run: python ${{ env.SCRIPTS_PATH }}/CreateTestVideos.py ${{ env.BRANCH_NAME }}
        
      - name: Create zip archive of app installer
        run: python ${{ env.SCRIPTS_PATH }}/ZipArtifacts.py ${{ env.BRANCH_NAME }}


